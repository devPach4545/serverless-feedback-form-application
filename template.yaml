AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-feedback-form-application

  Sample SAM Template for serverless-feedback-form-application

Parameters:
  snsEmailParameter:
    Type: String
    Description: SNS Email Address for Alert Notifications
    

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: "'POST, OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
      AllowOrigin: "'*'"

Resources:

  SentimentAnalyzerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ComprehendPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'comprehend:DetectSentiment'
                Resource: '*'

  DataPersisterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt FeedbackTable.Arn

  AlertPublisherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref NegativeFeedbackAlertTopic

  FeedbackValidatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FeedbackValidationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: !Ref FeedbackStateMachine

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt SentimentAnalyzerFunction.Arn
                  - !GetAtt DataPersisterFunction.Arn
                  - !GetAtt AlertPublisherFunction.Arn

  FeedbackTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: FeedbackTable
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  FeedbackStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: FeedbackProcessingWorkflow
      Role: !GetAtt StateMachineRole.Arn
      Definition:
        Comment: 'A state machine that processes user feedback.'
        StartAt: AnalyzeSentimentState
        States:
          AnalyzeSentimentState:
            Type: Task
            Resource: !GetAtt SentimentAnalyzerFunction.Arn
            Next: SentimentChoiceState
          SentimentChoiceState:
            Type: Choice
            Choices:
              - Variable: '$.Payload.sentiment'
                StringEquals: 'NEGATIVE'
                Next: NegativeFeedbackAlertState
            Default: PersistDataState
          NegativeFeedbackAlertState:
            Type: Task
            Resource: !GetAtt AlertPublisherFunction.Arn
            Next: PersistDataState
          PersistDataState:
            Type: Task
            Resource: !GetAtt DataPersisterFunction.Arn
            End: true

  NegativeFeedbackAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: NegativeFeedbackAlertTopic
      Subscription:
        - Protocol: email
          Endpoint: !Ref snsEmailParameter

  FeedbackValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/feedback-validator/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt FeedbackValidatorRole.Arn
      Environment:
        Variables:
          StepFunctionArn: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${FeedbackStateMachine}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /feedback
            Method: post

  SentimentAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sentiment-analyzer/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt SentimentAnalyzerRole.Arn
  
  DataPersisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/data-persister/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt DataPersisterRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref FeedbackTable

  AlertPublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/alert-publisher/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt AlertPublisherRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref NegativeFeedbackAlertTopic
      
Outputs:
  FeedbackApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for the feedback function"
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/feedback/'